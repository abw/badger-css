// WARNING: this file was generated by badger-color-scss
// Any changes you make here may be lost.
@use "sass:map";

@import "color/red.scss";
@import "color/brown.scss";
@import "color/orange.scss";
@import "color/yellow.scss";
@import "color/olive.scss";
@import "color/green.scss";
@import "color/teal.scss";
@import "color/blue.scss";
@import "color/indigo.scss";
@import "color/violet.scss";
@import "color/purple.scss";
@import "color/pink.scss";
@import "color/maroon.scss";
@import "color/grey.scss";
@import "color/grey20.scss";
@import "color/grey40.scss";

$color-names:
  'brown', 'orange', 'yellow', 'olive',
  'green', 'teal', 'blue', 'indigo', 'violet',
  'purple', 'pink', 'maroon', 'red', 'grey', 'grey20',
  'grey40' !default;

$color-stops:
  '0', '5', '10', '15', '20',
  '25', '30', '35', '40', '45',
  '50', '55', '60', '65', '70',
  '75', '80', '85', '90', '95',
  '100' !default;

$color-hues: (
  'red':    $red-hue,
  'brown':  $brown-hue,
  'orange': $orange-hue,
  'yellow': $yellow-hue,
  'olive':  $olive-hue,
  'green':  $green-hue,
  'teal':   $teal-hue,
  'blue':   $blue-hue,
  'indigo': $indigo-hue,
  'violet': $violet-hue,
  'purple': $purple-hue,
  'pink':   $pink-hue,
  'maroon': $maroon-hue,
  'grey':   $grey-hue,
  'grey20': $grey20-hue,
  'grey40': $grey40-hue,
) !default;

$color-ranges: (
  'red':    $red-range,
  'brown':  $brown-range,
  'orange': $orange-range,
  'yellow': $yellow-range,
  'olive':  $olive-range,
  'green':  $green-range,
  'teal':   $teal-range,
  'blue':   $blue-range,
  'indigo': $indigo-range,
  'violet': $violet-range,
  'purple': $purple-range,
  'pink':   $pink-range,
  'maroon': $maroon-range,
  'grey':   $grey-range,
  'grey20': $grey20-range,
  'grey40': $grey40-range,
) !default;

$color-scopes: (
  'blue':   '.info, .focus, :focus, .option:has(:focus)  ',
  'green':  '.success, .valid, .valid :focus',
  'orange': '.warning',
  'red':    '.error, .invalid, .invalid :focus'
) !default;

$brand-color: 'violet' !default;
$brand-hue: $violet-hue !default;
$brand-colors: (
  brand: $brand-color,
) !default;

$default-color: $brand-color !default;

// expand all color names and stops
:where(html) {
  @each $name in $color-names {
    $range: map.get($color-ranges, $name);
    @each $stop in $color-stops {
  --#{$name}-#{$stop}: #{map.get($range, $stop)};
    }
  }
  @each $brand, $name in $brand-colors {
    @each $stop in $color-stops {
  --#{$brand}-#{$stop}: var(--#{$name}-#{$stop});
    }
  }

  @each $stop in $color-stops {
  --color-#{$stop}: var(--#{$default-color}-#{$stop});
  }
}

// expand all .color scopes
@each $name in $color-names {
  $range: map.get($color-ranges, $name);
.#{$name} {
  @each $stop in $color-stops {
  --color-#{$stop}: var(--#{$name}-#{$stop});
  }
}
}

// expand all .brand scopes
@each $brand, $name in $brand-colors {
.#{$brand} {
  @each $stop in $color-stops {
  --color-#{$stop}: var(--#{$name}-#{$stop});
  }
}
}

// expand all custom scopes
@each $name, $scopes in $color-scopes {
  $range: map.get($color-ranges, $name);
#{$scopes} {
  @each $stop in $color-stops {
  --color-#{$stop}: var(--#{$name}-#{$stop});
  }
}
}
