@mixin spaced-out($prefix, $suffix, $param, $value) {
  .#{$prefix}#{$suffix}   { #{$param}:        $value !important; }
  .#{$prefix}-h#{$suffix},
  .#{$prefix}-l#{$suffix} { #{$param}-left:   $value !important; }
  .#{$prefix}-h#{$suffix},
  .#{$prefix}-r#{$suffix} { #{$param}-right:  $value !important; }
  .#{$prefix}-v#{$suffix},
  .#{$prefix}-t#{$suffix} { #{$param}-top:    $value !important; }
  .#{$prefix}-v#{$suffix},
  .#{$prefix}-b#{$suffix} { #{$param}-bottom: $value !important; }
}

@mixin spaced-out-margin($n) {
  $suffix:  spacing-suffix($n);
  $margin:  $n * $unit-margin;
  @include spaced-out('mar', $suffix, 'margin', $margin);
}

@mixin spaced-out-padding($n) {
  $suffix:  spacing-suffix($n);
  $padding: $n * $unit-padding;
  @include spaced-out('pad', $suffix, 'padding', $padding);
}

@mixin spaced-out-gutter($n) {
  $suffix: spacing-suffix($n);
  $gutter: $n * $unit-padding;
  @include spaced-out('gut', $suffix, 'padding', $gutter);
}

@mixin unsplit() {
  &[class*="split-"], & > [class*="split-"] {
    width: 100% !important;
    &[class*="gut-l"], &[class*="gut-h"] {
      padding-left: 0 !important;
    }
    &[class*="gut-r"], &[class*="gut-h"] {
      padding-right: 0 !important;
    }
  }
}

@mixin stack() {
  &[class*="split-"], & > [class*="split-"] {
    width: 100% !important;
  }
  &.flex {
    display: block !important;
  }
  &[class*="grid-"] {
    grid-template-columns: 1fr;
  }
}
