#--------------------------------------------------------------------------
# This config file is used by ../bin/export-palette-scss.js to export the
# ./badger-css-palette.json file into SCSS files in styles/config/palette
# It is usually invoked by running `pnpm build:palette` which is an alias
# for `bin/export-palette-scss.js -c config/export-palette-scss.yaml -v`.
#--------------------------------------------------------------------------

# Path to palette data file (downloaded from badger-color)
palette:    config/badger-css-palette.json
# Path to output directory
output:     styles/color
# Default brand color
brandColor: blue

# These are the default semantic colors.  You can define your own set of
# semanticColors if you want to replace them.
#
# semanticColors:
#  info:     blue
#  success:  green
#  warning:  orange
#  error:    red

# Alternately you can define extraSemanticColors to augment the defaults.
# Note that if you define your own semanticColors you should include them
# in there as these will be ignored.
#
# extraSemanticColors:
#   happy: yellow
#   sad:   blue

# These are the default selectors for semantic colors.  You can define your
# own set if you know what you're doing.
#
# selectors:
#   info:     .info
#   success:  .success
#   warning:  .warning
#   error:    .error
#   focus:
#     - .focus:not(button):not(.button)
#     - :focus:not(button):not(.button)
#     - .field:has(:focus)
#     - label:is(.checkbox, .radio, :has(input[type=checkbox]), :has(input[type=radio])):is(:has(:focus))
#   valid:
#     - .field.valid
#     - .field.valid :focus:not(button):not(.button)
#     - .field.valid:has(:focus)
#     - .field.valid:has(:focus) label:is(.checkbox, .radio, :has(input[type=checkbox]), :has(input[type=radio])):is(:has(:focus))
#   invalid:
#     - .field.invalid
#     - .field.invalid :focus:not(button):not(.button)
#     - .field.invalid:has(:focus)
#     - .field.invalid:has(:focus) label:is(.checkbox, .radio, :has(input[type=checkbox]), :has(input[type=radio])):is(:has(:focus))

# Alternately you can define extraSelectors to augment the default selectors.
# You should do this if you've defined extraSemanticColors or added your own
# semantic colors to the semanticColors definition.  Note that if you define
# your own selectors you should include them in there as these will be ignored.
#
# extraSelectors:
#   happy: .happy
#   sad:   .sad